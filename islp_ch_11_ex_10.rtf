{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 ISLP Chapter 11 Applied exercise 10\
\
a. \
\
import pandas as pd\
import matplotlib.pyplot as plt\
from lifelines import KaplanMeierFitter\
\
# Assuming you have the ISLP dataset, load it into a DataFrame\
# Replace 'your_dataset.csv' with the actual file path or URL of your dataset\
df = pd.read_csv('your_dataset.csv')\
\
# Assuming your dataset has columns 'time' for survival time and 'status' for event/censor indicator\
# Replace them with the actual column names in your dataset\
time_column = 'time'\
event_column = 'status'\
\
# Create KaplanMeierFitter object\
kmf = KaplanMeierFitter()\
\
# Fit the Kaplan-Meier estimator to the data\
kmf.fit(durations=df[time_column], event_observed=df[event_column])\
\
# Plot the Kaplan-Meier survival curve with \'b11 standard error bands\
kmf.plot_survival_function(ci_show=True, ci_alpha=0.1, legend=True)\
\
# Customize the plot\
plt.title('Kaplan-Meier Survival Curve with \'b11 SE Bands')\
plt.xlabel('Time')\
plt.ylabel('Survival Probability')\
\
# Show the plot\
plt.show()\
\
b. \
\
import pandas as pd\
import numpy as np\
import matplotlib.pyplot as plt\
from lifelines import KaplanMeierFitter\
from lifelines.utils import bootstrap\
\
# Assuming you have the ISLP dataset, load it into a DataFrame\
# Replace 'your_dataset.csv' with the actual file path or URL of your dataset\
df = pd.read_csv('your_dataset.csv')\
\
# Assuming your dataset has columns 'time' for survival time and 'status' for event/censor indicator\
# Replace them with the actual column names in your dataset\
time_column = 'time'\
event_column = 'status'\
\
# Set the number of bootstrap samples and size of each sample\
B = 200\
n_bootstrap = 88\
\
# Create KaplanMeierFitter object\
kmf = KaplanMeierFitter()\
\
# Function to compute Kaplan-Meier survival curve for a given bootstrap sample\
def compute_kaplan_meier(data):\
    kmf.fit(durations=data[time_column], event_observed=data[event_column])\
    return kmf.survival_function_\
\
# Perform bootstrap sampling and compute survival curves\
bootstrap_survival_curves = bootstrap(df, B=B, size=n_bootstrap, func=compute_kaplan_meier)\
\
# Calculate standard errors at each timepoint\
timepoints = kmf.timeline\
std_errors = np.std(bootstrap_survival_curves, axis=0)\
\
# Plot the Kaplan-Meier survival curve with \'b11 standard error bands\
plt.plot(timepoints, kmf.survival_function_.values, label='Original', color='blue')\
plt.fill_between(timepoints, kmf.survival_function_.values - std_errors, kmf.survival_function_.values + std_errors, alpha=0.1, color='blue')\
\
# Plot individual bootstrap samples (optional)\
# for curve in bootstrap_survival_curves:\
#     plt.plot(timepoints, curve.values, color='gray', alpha=0.1)\
\
# Customize the plot\
plt.title('Bootstrap Kaplan-Meier Survival Curve with \'b11 SE Bands')\
plt.xlabel('Time')\
plt.ylabel('Survival Probability')\
\
# Show the plot\
plt.legend()\
plt.show()\
\
}